{"title":"Challenge-3","markdown":{"yaml":{"title":"Challenge-3","author":"Janelle Tan","date":"`r Sys.Date()`","output":{"pdf_document":"default","html_document":"default"}},"headingText":"I. Questions","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<style>\np.comment {\nbackground-color: #DBDBDB;\npadding: 10px;\nborder: 1px solid black;\nmargin-left: 25px;\nborder-radius: 5px;\nfont-style: italic;\n}\n\n</style>\n\n\n#### Question 1: Emoji Expressions\n\nImagine you're analyzing social media posts for sentiment analysis. \n\nIf you were to create a variable named \"postSentiment\" to store the sentiment of a post using emojis (üòÑ for positive, üòê for neutral, üò¢ for negative), what data type would you assign to this variable? \n\nWhy? (_narrative type question, no code required_)\n\n**Solution:**  \n\nData type: Character\n\nReason: \n\nEmojis are essentially represented as sequences of characters. In R, a character data type is used to store individual characters, strings, or sequences of text. Emojis are a form of textual representation, and they are treated as strings of characters. Therefore, by assigning the \"postSentiment\" variable the character data type, you can accurately store and represent the sentiment of a post using emojis. The sentiments are also naturally ordered, from positive to negative, hence, the character data type should be used since it is an ordinal variable.\n\n\n\n#### Question 2: Hashtag Havoc\n\nIn a study on trending hashtags, you want to store the list of hashtags associated with a post. \n\nWhat data type would you choose for the variable \"postHashtags\"? \n\nHow might this data type help you analyze and categorize the hashtags later? (_narrative type question, no code required_)\n\n\n**Solution:**   \n\nData type: Character\n\nReason: \n\nHashtags are strings of characters.\n\nHow will this data type help in analysis and categorisation:\nIndividual Hashtag Access: You can easily access individual hashtags by indexing the vector. For example, you could retrieve the first hashtag using postHashtags[1].\n\nVisualization: You can create visualizations like word clouds or bar plots to showcase the most common hashtags and their frequencies.\n\n\n\n#### Question 3: Time Traveler's Log\n  \nYou're examining the timing of user interactions on a website. Would you use a numeric or non-numeric data type to represent the timestamp of each interaction? Explain your choice (_narrative type question, no code required_)\n\n**Solution:**  \nNumeric. \n\nTime is a continuous numeric variable. Between any two time points, there are infinitely many other possible time points. Hence, I would consider using the numeric double data type. However, there may be imitations in measurement precision or computational representation. In such cases, I would use the numeric integer data type for time.\n\n\n\n\n#### Question 4: Event Elegance\n\nYou're managing an event database that includes the date and time of each session. \n\nWhat data type(s) would you use to represent the session date and time? (_narrative type question, no code required_)\n\n**Solution:**   \nEither integer or double data type. \n\nI would use the integer data type for dates, since dates are discrete numeric variables without decimals and are finite.\n\nI would use the double data type for time, since time is a continuous numeric variable.  Between any two time points, there are infinitely many other possible time points. However, there may be imitations in measurement precision or computational representation. In such cases, I would use the integer data type for time.\n\n\n\n#### Question 5: Nominee Nominations\nYou're analyzing nominations for an online award. Each participant can nominate multiple candidates. What data type would be suitable for storing the list of nominated candidates for each participant?  (_narrative type question, no code required_)\n\n**Solution:**  \n\nData type: Character (nominal)\n\n\n#### Question 6: Communication Channels\nIn a survey about preferred communication channels, respondents choose from options like \"email,\" \"phone,\" or \"social media.\" What data type would you assign to the variable \"preferredChannel\"? (_narrative type question, no code required_)\n\n**Solution:**  \nData type: Character (nominal)\n\n\n\n#### Question 7: Colorful Commentary\n\nIn a design feedback survey, participants are asked to describe their feelings about a website using color names (e.g., \"warm red,\" \"cool blue\"). What data type would you choose for the variable \"feedbackColor\"? (_narrative type question, no code required_)\n\n**Solution:**  \nData type: Character (nominal)\n\n\n#### Question 8: Variable Exploration\n\nImagine you're conducting a study on social media usage. Identify three variables related to this study, and specify their data types in R. Classify each variable as either numeric or non-numeric.\n\n**Solution:**  \nTotal usage timing: numeric, double.\n\nUser traffic: numeric, integer.\n\nRating of how much they like the social media platform they're using (very pleasant, pleasant, neutral, unpleasant, very unpleasant): non-numeric, character.\n\n\n#### Question 9: Vector Variety\n\nCreate a numeric vector named \"ages\" containing the ages of five people: 25, 30, 22, 28, and 33. Print the vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nages <- c(25, 30, 22, 28, 33)\n\nprint(ages)\n\n```\n\n#### Question 10: List Logic\n\nConstruct a list named \"student_info\" that contains the following elements:\n\n  - A character vector of student names: \"Alice,\" \"Bob,\" \"Catherine\"\n\n  - A numeric vector of their respective scores: 85, 92, 78\n\n  - A logical vector indicating if they passed the exam: TRUE, TRUE, FALSE\n\nPrint the list.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\n\nnames <- c(\"Alice\", \"Bob\", \"Catherine\")\nscores <- c(85, 92, 78)\npass_exam <- c(TRUE, TRUE, FALSE)\n\nstudent_info <- list(names, scores, pass_exam)\n\nprint(student_info)\n\n```\n\n#### Question 11: Type Tracking\n\nYou have a vector \"data\" containing the values 10, 15.5, \"20\", and TRUE. Determine the data types of each element using the typeof() function.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\ndata <- c(10, 15.5, \"20\", TRUE)\n\ntypeof(data[1])\ntypeof(data[2])\ntypeof(\"20\")\ntypeof(TRUE)\n```\n\n#### Question 12: Coercion Chronicles\n\nYou have a numeric vector \"prices\" with values 20.5, 15, and \"25\". Use explicit coercion to convert the last element to a numeric data type. Print the updated vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nprices <- c(20.5, 15, \"25\")\n\nprices <- as.numeric(prices)\n\nprint(prices)\n```\n\n#### Question 13: Implicit Intuition\n\nCombine the numeric vector c(5, 10, 15) with the character vector c(\"apple\", \"banana\", \"cherry\"). What happens to the data types of the combined vector? Explain the concept of implicit coercion.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nnumbers <- c(5, 10, 15) \nfruits <- c(\"apple\", \"banana\", \"cherry\")\ntypeof(numbers)\ntypeof(fruits)\n\ncombined <- c(numbers, fruits)\ntypeof(combined)\n\n##The data types of the combined vector became of the character data type. Implicit coercion is when R R automatically converts values from one data type to another to perform operations or comparisons.\n```\n\n#### Question 14: Coercion Challenges\n\nYou have a vector \"numbers\" with values 7, 12.5, and \"15.7\". Calculate the sum of these numbers. Will R automatically handle the data type conversion? If not, how would you handle it?\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nvector <- c(7, 12.5, \"15.7\")\n\n## R does not automatically handle the data type conversion. \n\nvector <- as.numeric(vector)\nsum(vector)\n```\n\n#### Question 15: Coercion Consequences\n\nSuppose you want to calculate the average of a vector \"grades\" with values 85, 90.5, and \"75.2\". If you directly calculate the mean using the mean() function, what result do you expect? How might you ensure accurate calculation?\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\ngrades <- c(85, 90.5, \"75.2\")\n\n##I would expect an error message\n\ngrades <- as.numeric(grades)\nmean(grades)\n```\n\n#### Question 16: Data Diversity in Lists\n\nCreate a list named \"mixed_data\" with the following components:\n\n  - A numeric vector: 10, 20, 30\n  \n  - A character vector: \"red\", \"green\", \"blue\"\n\n  - A logical vector: TRUE, FALSE, TRUE\n  \nCalculate the mean of the numeric vector within the list.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nnumbers <- c(10, 20, 30)\ncolours <- c(\"red\", \"green\", \"blue\")\nlogical <- c(TRUE, FALSE, FALSE)\n\nmixed_data <- list(numbers, colours, logical)\nmixed_data\n\nnumeric_vector <- mixed_data[[1]]\nmean_numeric <- mean(numeric_vector)\nprint(mean_numeric)\n```\n\n#### Question 17: List Logic Follow-up\n\nUsing the \"student_info\" list from Question 10, extract and print the score of the student named \"Bob.\"\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nprint(student_info)\n\nnames(student_info) <- c(\"students\", \"scores\", \"passed\")\n\nprint(student_info)\n\nstudent_info$scores[2]\n\n```\n\n#### Question 18: Dynamic Access\n\nCreate a numeric vector values with random values. Write R code to dynamically access and print the last element of the vector, regardless of its length.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nvector <- c(1, 2, 3, 4, 5)\nlast_element <- vector[length(vector)]\nprint(last_element)\n```\n\n#### Question 19: Multiple Matches\n\nYou have a character vector words <- c(\"apple\", \"banana\", \"cherry\", \"apple\"). Write R code to find and print the indices of all occurrences of the word \"apple.\"\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nwords <- c(\"apple\", \"banana\", \"cherry\", \"apple\")\napple_indices <- which(words == \"apple\")\nprint(apple_indices)\n```\n\n#### Question 20: Conditional Capture\n\nAssume you have a vector ages containing the ages of individuals. Write R code to extract and print the ages of individuals who are older than 30.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nages <- c(10, 20, 30, 40, 50)\nvector <- which(ages > 30)\nages_greater_than_30 <- ages[vector]\nprint(ages_greater_than_30)\n```\n\n#### Question 21: Extract Every Nth\n\nGiven a numeric vector sequence <- 1:20, write R code to extract and print every third element of the vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nsequence <- 1:20\nevery_third <- sequence[seq(3, length(sequence), by = 3)]\nprint(every_third)\n\n```\n\n#### Question 22: Range Retrieval\n\nCreate a numeric vector numbers with values from 1 to 10. Write R code to extract and print the values between the fourth and eighth elements.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nvector <- c(1:10)\nprint(vector[4:8])\n```\n\n#### Question 23: Missing Matters\n\nSuppose you have a numeric vector data <- c(10, NA, 15, 20). Write R code to check if the second element of the vector is missing (NA).\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\ndata <- c(10, NA, 15, 20)\nmissing <- is.na(data[2])\nprint(missing)\n```\n\n#### Question 24: Temperature Extremes\n\nAssume you have a numeric vector temperatures with daily temperatures. Create a logical vector hot_days that flags days with temperatures above 90 degrees Fahrenheit. Print the total number of hot days.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\ndaily_temperatures <- c(70, 80, 90, 100, 110)\nhot_days <- c(daily_temperatures > 90)\nprint(sum(hot_days))\n```\n\n#### Question 25: String Selection\n\nGiven a character vector fruits containing fruit names, create a logical vector long_names that identifies fruits with names longer than 6 characters. Print the long fruit names.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\n\nfruit_names <- c(\"banana\", \"pineapple\", \"strawberry\", \"blackberry\")\n\nlong_names <- nchar(fruit_names) > 6\n\nprint(fruit_names[long_names])\n```\n\n#### Question 26: Data Divisibility\n\nGiven a numeric vector numbers, create a logical vector divisible_by_5 to indicate numbers that are divisible by 5. Print the numbers that satisfy this condition.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nnumbers <- 1:20\ndivisible_by_5 <- numbers %% 5 == 0\nprint(numbers[divisible_by_5])\n```\n\n#### Question 27: Bigger or Smaller?\n\nYou have two numeric vectors vector1 and vector2. Create a logical vector comparison to indicate whether each element in vector1 is greater than the corresponding element in vector2. Print the comparison results.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nvector1 <- c(1, 7, 3, 4, 65, 45, 30)\nvector2 <- c(3, 6, 5, 47, 89, 90, 54)\n\ncomparison <- vector1 > vector2\n\nprint(comparison)\n\n```\n\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<style>\np.comment {\nbackground-color: #DBDBDB;\npadding: 10px;\nborder: 1px solid black;\nmargin-left: 25px;\nborder-radius: 5px;\nfont-style: italic;\n}\n\n</style>\n\n## I. Questions\n\n#### Question 1: Emoji Expressions\n\nImagine you're analyzing social media posts for sentiment analysis. \n\nIf you were to create a variable named \"postSentiment\" to store the sentiment of a post using emojis (üòÑ for positive, üòê for neutral, üò¢ for negative), what data type would you assign to this variable? \n\nWhy? (_narrative type question, no code required_)\n\n**Solution:**  \n\nData type: Character\n\nReason: \n\nEmojis are essentially represented as sequences of characters. In R, a character data type is used to store individual characters, strings, or sequences of text. Emojis are a form of textual representation, and they are treated as strings of characters. Therefore, by assigning the \"postSentiment\" variable the character data type, you can accurately store and represent the sentiment of a post using emojis. The sentiments are also naturally ordered, from positive to negative, hence, the character data type should be used since it is an ordinal variable.\n\n\n\n#### Question 2: Hashtag Havoc\n\nIn a study on trending hashtags, you want to store the list of hashtags associated with a post. \n\nWhat data type would you choose for the variable \"postHashtags\"? \n\nHow might this data type help you analyze and categorize the hashtags later? (_narrative type question, no code required_)\n\n\n**Solution:**   \n\nData type: Character\n\nReason: \n\nHashtags are strings of characters.\n\nHow will this data type help in analysis and categorisation:\nIndividual Hashtag Access: You can easily access individual hashtags by indexing the vector. For example, you could retrieve the first hashtag using postHashtags[1].\n\nVisualization: You can create visualizations like word clouds or bar plots to showcase the most common hashtags and their frequencies.\n\n\n\n#### Question 3: Time Traveler's Log\n  \nYou're examining the timing of user interactions on a website. Would you use a numeric or non-numeric data type to represent the timestamp of each interaction? Explain your choice (_narrative type question, no code required_)\n\n**Solution:**  \nNumeric. \n\nTime is a continuous numeric variable. Between any two time points, there are infinitely many other possible time points. Hence, I would consider using the numeric double data type. However, there may be imitations in measurement precision or computational representation. In such cases, I would use the numeric integer data type for time.\n\n\n\n\n#### Question 4: Event Elegance\n\nYou're managing an event database that includes the date and time of each session. \n\nWhat data type(s) would you use to represent the session date and time? (_narrative type question, no code required_)\n\n**Solution:**   \nEither integer or double data type. \n\nI would use the integer data type for dates, since dates are discrete numeric variables without decimals and are finite.\n\nI would use the double data type for time, since time is a continuous numeric variable.  Between any two time points, there are infinitely many other possible time points. However, there may be imitations in measurement precision or computational representation. In such cases, I would use the integer data type for time.\n\n\n\n#### Question 5: Nominee Nominations\nYou're analyzing nominations for an online award. Each participant can nominate multiple candidates. What data type would be suitable for storing the list of nominated candidates for each participant?  (_narrative type question, no code required_)\n\n**Solution:**  \n\nData type: Character (nominal)\n\n\n#### Question 6: Communication Channels\nIn a survey about preferred communication channels, respondents choose from options like \"email,\" \"phone,\" or \"social media.\" What data type would you assign to the variable \"preferredChannel\"? (_narrative type question, no code required_)\n\n**Solution:**  \nData type: Character (nominal)\n\n\n\n#### Question 7: Colorful Commentary\n\nIn a design feedback survey, participants are asked to describe their feelings about a website using color names (e.g., \"warm red,\" \"cool blue\"). What data type would you choose for the variable \"feedbackColor\"? (_narrative type question, no code required_)\n\n**Solution:**  \nData type: Character (nominal)\n\n\n#### Question 8: Variable Exploration\n\nImagine you're conducting a study on social media usage. Identify three variables related to this study, and specify their data types in R. Classify each variable as either numeric or non-numeric.\n\n**Solution:**  \nTotal usage timing: numeric, double.\n\nUser traffic: numeric, integer.\n\nRating of how much they like the social media platform they're using (very pleasant, pleasant, neutral, unpleasant, very unpleasant): non-numeric, character.\n\n\n#### Question 9: Vector Variety\n\nCreate a numeric vector named \"ages\" containing the ages of five people: 25, 30, 22, 28, and 33. Print the vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nages <- c(25, 30, 22, 28, 33)\n\nprint(ages)\n\n```\n\n#### Question 10: List Logic\n\nConstruct a list named \"student_info\" that contains the following elements:\n\n  - A character vector of student names: \"Alice,\" \"Bob,\" \"Catherine\"\n\n  - A numeric vector of their respective scores: 85, 92, 78\n\n  - A logical vector indicating if they passed the exam: TRUE, TRUE, FALSE\n\nPrint the list.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\n\nnames <- c(\"Alice\", \"Bob\", \"Catherine\")\nscores <- c(85, 92, 78)\npass_exam <- c(TRUE, TRUE, FALSE)\n\nstudent_info <- list(names, scores, pass_exam)\n\nprint(student_info)\n\n```\n\n#### Question 11: Type Tracking\n\nYou have a vector \"data\" containing the values 10, 15.5, \"20\", and TRUE. Determine the data types of each element using the typeof() function.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\ndata <- c(10, 15.5, \"20\", TRUE)\n\ntypeof(data[1])\ntypeof(data[2])\ntypeof(\"20\")\ntypeof(TRUE)\n```\n\n#### Question 12: Coercion Chronicles\n\nYou have a numeric vector \"prices\" with values 20.5, 15, and \"25\". Use explicit coercion to convert the last element to a numeric data type. Print the updated vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nprices <- c(20.5, 15, \"25\")\n\nprices <- as.numeric(prices)\n\nprint(prices)\n```\n\n#### Question 13: Implicit Intuition\n\nCombine the numeric vector c(5, 10, 15) with the character vector c(\"apple\", \"banana\", \"cherry\"). What happens to the data types of the combined vector? Explain the concept of implicit coercion.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nnumbers <- c(5, 10, 15) \nfruits <- c(\"apple\", \"banana\", \"cherry\")\ntypeof(numbers)\ntypeof(fruits)\n\ncombined <- c(numbers, fruits)\ntypeof(combined)\n\n##The data types of the combined vector became of the character data type. Implicit coercion is when R R automatically converts values from one data type to another to perform operations or comparisons.\n```\n\n#### Question 14: Coercion Challenges\n\nYou have a vector \"numbers\" with values 7, 12.5, and \"15.7\". Calculate the sum of these numbers. Will R automatically handle the data type conversion? If not, how would you handle it?\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nvector <- c(7, 12.5, \"15.7\")\n\n## R does not automatically handle the data type conversion. \n\nvector <- as.numeric(vector)\nsum(vector)\n```\n\n#### Question 15: Coercion Consequences\n\nSuppose you want to calculate the average of a vector \"grades\" with values 85, 90.5, and \"75.2\". If you directly calculate the mean using the mean() function, what result do you expect? How might you ensure accurate calculation?\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\ngrades <- c(85, 90.5, \"75.2\")\n\n##I would expect an error message\n\ngrades <- as.numeric(grades)\nmean(grades)\n```\n\n#### Question 16: Data Diversity in Lists\n\nCreate a list named \"mixed_data\" with the following components:\n\n  - A numeric vector: 10, 20, 30\n  \n  - A character vector: \"red\", \"green\", \"blue\"\n\n  - A logical vector: TRUE, FALSE, TRUE\n  \nCalculate the mean of the numeric vector within the list.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nnumbers <- c(10, 20, 30)\ncolours <- c(\"red\", \"green\", \"blue\")\nlogical <- c(TRUE, FALSE, FALSE)\n\nmixed_data <- list(numbers, colours, logical)\nmixed_data\n\nnumeric_vector <- mixed_data[[1]]\nmean_numeric <- mean(numeric_vector)\nprint(mean_numeric)\n```\n\n#### Question 17: List Logic Follow-up\n\nUsing the \"student_info\" list from Question 10, extract and print the score of the student named \"Bob.\"\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nprint(student_info)\n\nnames(student_info) <- c(\"students\", \"scores\", \"passed\")\n\nprint(student_info)\n\nstudent_info$scores[2]\n\n```\n\n#### Question 18: Dynamic Access\n\nCreate a numeric vector values with random values. Write R code to dynamically access and print the last element of the vector, regardless of its length.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nvector <- c(1, 2, 3, 4, 5)\nlast_element <- vector[length(vector)]\nprint(last_element)\n```\n\n#### Question 19: Multiple Matches\n\nYou have a character vector words <- c(\"apple\", \"banana\", \"cherry\", \"apple\"). Write R code to find and print the indices of all occurrences of the word \"apple.\"\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nwords <- c(\"apple\", \"banana\", \"cherry\", \"apple\")\napple_indices <- which(words == \"apple\")\nprint(apple_indices)\n```\n\n#### Question 20: Conditional Capture\n\nAssume you have a vector ages containing the ages of individuals. Write R code to extract and print the ages of individuals who are older than 30.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nages <- c(10, 20, 30, 40, 50)\nvector <- which(ages > 30)\nages_greater_than_30 <- ages[vector]\nprint(ages_greater_than_30)\n```\n\n#### Question 21: Extract Every Nth\n\nGiven a numeric vector sequence <- 1:20, write R code to extract and print every third element of the vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nsequence <- 1:20\nevery_third <- sequence[seq(3, length(sequence), by = 3)]\nprint(every_third)\n\n```\n\n#### Question 22: Range Retrieval\n\nCreate a numeric vector numbers with values from 1 to 10. Write R code to extract and print the values between the fourth and eighth elements.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nvector <- c(1:10)\nprint(vector[4:8])\n```\n\n#### Question 23: Missing Matters\n\nSuppose you have a numeric vector data <- c(10, NA, 15, 20). Write R code to check if the second element of the vector is missing (NA).\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\ndata <- c(10, NA, 15, 20)\nmissing <- is.na(data[2])\nprint(missing)\n```\n\n#### Question 24: Temperature Extremes\n\nAssume you have a numeric vector temperatures with daily temperatures. Create a logical vector hot_days that flags days with temperatures above 90 degrees Fahrenheit. Print the total number of hot days.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\ndaily_temperatures <- c(70, 80, 90, 100, 110)\nhot_days <- c(daily_temperatures > 90)\nprint(sum(hot_days))\n```\n\n#### Question 25: String Selection\n\nGiven a character vector fruits containing fruit names, create a logical vector long_names that identifies fruits with names longer than 6 characters. Print the long fruit names.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\n\nfruit_names <- c(\"banana\", \"pineapple\", \"strawberry\", \"blackberry\")\n\nlong_names <- nchar(fruit_names) > 6\n\nprint(fruit_names[long_names])\n```\n\n#### Question 26: Data Divisibility\n\nGiven a numeric vector numbers, create a logical vector divisible_by_5 to indicate numbers that are divisible by 5. Print the numbers that satisfy this condition.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nnumbers <- 1:20\ndivisible_by_5 <- numbers %% 5 == 0\nprint(numbers[divisible_by_5])\n```\n\n#### Question 27: Bigger or Smaller?\n\nYou have two numeric vectors vector1 and vector2. Create a logical vector comparison to indicate whether each element in vector1 is greater than the corresponding element in vector2. Print the comparison results.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Enter code here\nvector1 <- c(1, 7, 3, 4, 65, 45, 30)\nvector2 <- c(3, 6, 5, 47, 89, 90, 54)\n\ncomparison <- vector1 > vector2\n\nprint(comparison)\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"pdf_document":"default","html_document":"default"},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"NM2207 W3 Challenge-3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":"cosmo","title":"Challenge-3","author":"Janelle Tan","date":"`r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}